// 6-10 
// 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오.)
// a. 모든 생성자의 이름은 클래스의 이름과 동일해야 한다.
// b. 생성자는 객체를 생성하기 위한 것이다.
// c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
// d. 생성자가 없는 클래스는 컴파일러가 기본생성자를 추가한다.
// e. 생성자는 오버로딩 할 수 없다.
// 정답 : b > 생성자는 객체의 인스턴스변수를 초기화하기 위한 것이다.
//    : e > 생성자는 오버로딩 할 수 있다. 오버로딩 > 매개변수의 타입과 개수가 달라야한다...(2번 조건) 생성자는 이에 대해 성립한다.
// 
// 6-11
// 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오.)
// a. 객체 자신을 가리키는 참조변수이다.
// b. 클래스 내에서라면 어디서든 사용할 수 있다.
// c. 지역변수와 인스턴스변수를 구별할 때 사용한다. 
// d. 클래스 메서드 내에서는 사용할 수 없다.
// 정답 : 없다. 모두 다 맞는 말이다.
// 개뿔이다. 답 하나 있다...b이다. static메서드에선 사용 못하고, static변수는 참조를 못한다...;;
// 
// 6-12
// 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오.)
// a. 메서드의 이름이 같아야 한다.
// b. 매개변수의 개수나 타입이 달라야 한다.
// c. 리턴타입이 달라야 한다.
// d. 매개변수의 이름이 달라야 한다.
// 정답 : c > 리턴타입 상관없다.
//      d > 매개변수의 타입이나 개수가 달라야한다. 이름은 같아도 달라도 상관없다.
//  
// 6-13
// 다음 중 아래의 add메서드를 올바르게 오버로딩 한 것은? (모두 고르시오.)
// long add(int a, int b) { return a+b;}
// 
// a. long add(int x, int y) { return x+y; }
// b. long add(long a, long b) { return a+b; } 
// c. int add(byte a, byte b) { return a+b; }
// d. int add(long a, int b) { return (int)(a+b); }
// 
// 정답 : b, c, d > 원래의 add메서드와 매개변수의 타입이 같거나, 달라야 하는데, 다 다르다.
// 
//  
// 
// 6-14
// 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오.)
// a.멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다.
// b.지역변수는 사용하기 전에 반드시 초기화해야 한다.
// c.초기화 블럭보다 생성자가 먼저 수행된다.
// d.명시적 초기화를 제일 우선적으로 고려해야한다.
// e.클래스변수보다 인스턴스변수가 먼저 초기화된다.
// 
// 정답 : c > 초기화 블럭이 생성자보다 우선된다.
// 		e > 클래스변수가 메모리에 로딩되면서 가장 먼저 초기화 되고, 그 이후에는 인스턴스변수가 인스턴스 생성할 때마다 초기화 된다.
// 
// 6-15 
// 다음 중 인스턴스 변수의 초기화 순서가 올바른 것은?
// // 자동초기화 - 명시적 초기화(간단) - 초기화 블럭 - 생성자 < 이거 찾으면 되는데..
// a. 기본값-명시적초기화-초기화블럭-생성자 << 이게 답이다.
// b. 나
// c. 머
// d. 지
// 
// 6-16
// 다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오.
// a. 자동 초기화되므로 별도의 초기화가 필요없다.
// b. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
// c. 메서드의 매개변수로 선언된 변수도 지역변수이다.
// d. 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
// e. 힙(heap)영역에 생성되며 가비지 컬렉터에 의해 소멸된다.
// 
// 정답 : a > 자동 초기화 되지 않으므로 별도의 초기화가 필요하다.
// 		d > 메모리 부담이 클 수 밖에 없다. 자주 사용되면, 반복적으로 올라갔다, 내려갔다 하는데 부담이 클 수 밖에 없다.
// 		e > 이건 iv에 해당되는 내용이다. 지역변수는 Stack 영역에 생성된다.
// 	// d는 아니다. 메서드 종료시 같이 사라져서 메모리 부담이 적다..;; 
//  // 메모리 부담은 메모리에 저장되는 시간이 길어질수록...큰 거 같다..
//
// 6-17
// 호출스택이 다음과 같은 상황일 때 옳지 않은 설명은?(모두 고르시오.)
//			
//	 				|	println	  |	
// 					|	method1	  |
// 					|	method2	  |
// 					|	main	  |
// 					|-ㅡㅡㅡㅡㅡㅡㅡㅡ-|
// a. 제일 먼저 호출스택에 저장된 것은 main메서드이다.
// b. println메서드를 제외한 나머지 메서드들은 모두 종료된 상태다.
// c. method2메서드를 호출한 것은 main메서드이다.
// d. println메서드가 종료되면, method1메서드가 수행을 재개한다.
// e. main-method2-method1-println의 순서로 호출되었다.
// f. 현재 실행중인 메서드는 println뿐이다. 
// 
// 정답 : b > 종료된 상태가 아니라 대기하고 있는 상태다.
