/* 7-3
 * 오버라이딩의 정의와 필요성에 대해서 설명하시오.
 * 
 * 오버라이딩의 필요성 : 조상에게 상속받은 메서드를 자손타입에 맞게 구현해주는 것
 * 예를 들어서, 두 점의 좌표를 저장한 point 객체에 두점의 좌표를 알려주는 메서드 printpoint()가 있다고 가정해보자.
 * printpoint()메서드는 point의 두 점의 좌표를 알려줄 것이다.
 * 
 * 그런데 point 클래스의 자손타입으로 세 점의 좌표를 저장한 point3D 클래스가 있다고 가정했을 때 이 클래스는 point클래스의 메서드인
 * printpoint()를 상속 받았을 것이다. 그런데 point클래스의 printpoint() 메서드를 사용한 이용자는 이 메서드가
 * 두 점의 좌표를 나타내주는 것임을 생각하고 있을 것이고, 그것을 상속한 point3D 클래스 역시 printpoint() 메서드를 사용하면 세 점의 좌표를
 * 나타내줄 것이라고 생각하지만, 정작 point3D 클래스의 printpoint()메서드는 두점의 좌표만을 나타내줄 것이다.
 * 
 * 이런 예시로 인해서 필요한 것이 오버라이딩이다. 오버라이딩은 조상클래스로부터 상속받은 메서드를 자손타입의 맞게 구현하는 것이다.
 * point클래스를 상속받은 point3D 클래스는 printPoint()를 세 점의 좌표가 출력되도록 그 내용을 바꿔줘야 할 것이다.
 * 
 * 오버라이딩의 조건은 
 * 1. 선언부(반환타입, 메서드이름, 매개변수)가 동일해야하고, 
 * 2. 접근제어자의 범위가 조상보다 좁으면 안 되며,
 * 3. 예외처리가 조상의 예외처리보다 많으면 안 된다.
 * 
 */


public class prac107_03 {}


